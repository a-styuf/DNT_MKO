*******************************************************************************
*                                                                             *
*              K1874BE96T C CROSS COMPILER Version 2.00.150328                *
*                          Copyright (C) 2012 NIIET                           *
*                                                                             *
*******************************************************************************

                 MKO_UD_Init:
;FILE: .\TestLinear\mko_ud.c
;000011    void MKO_UD_Init()
;000013    	BSICONFIG = 0x4005; //конфигурация удаленного терминала
00000000    A105401C                       	LD    _AX,#4005h
00000004    C30100001C                     	ST    _AX,BSICONFIG
;000014    	BSICON_TERM = ((0x1F&MKO_ADR)<<11) | 0x0001;
00000009    A101981C                       	LD    _AX,#9801h
0000000D    C30100001C                     	ST    _AX,BSICON_TERM
;000015    	INT_MASK1 |= 0x0002; //разрешение прерывания по МКО
00000012    910200                         	ORB   INT_MASK1,#02h
;000016    	INT_PEND1 &= ~0x0002; // запрещаем ждущие прерывания
00000015    71FD00                         	ANDB  INT_PEND1,#0FDh
;000017    }
00000018    F0                             	RET   
.ENDF
        MKO_data_to_transmit:
;000019    int8 MKO_data_to_transmit(uint16 *data, uint8 subaddr)
00000019    C824                           	PUSH  _EX
0000001B    B01E25                         	LDB   _EH,_BL
;000022      if (subaddr == 0 | subaddr > 30) return -1;
0000001E    980025                         	CMPB  subaddr?MKO_data_to_transmit,0
00000021    DF05                           	JE    ??_1_IF
00000023    991F25                         	CMPB  subaddr?MKO_data_to_transmit,#1Fh
00000026    D305                           	JNC   ??_1_ELSE
                     ??_1_IF:
00000028    B1FF1C                         	LDB   _AL,#0FFh
0000002B    20DB                           	SJMP  ??_EXIT?_MKO_data_to_transmit
                   ??_1_ELSE:
;000023      for (i=0; i<31; i++)
0000002D    1124                           	CLRB  i?MKO_data_to_transmit
                   ??_3_LOOP:
;000024      {
;000025        MKO_tr_data[i+1+(subaddr*32)] = data[i];
0000002F    AC251E                         	LDBZE _BX,subaddr?MKO_data_to_transmit
00000032    09051E                         	SHL   _BX,#05h
00000035    AC2420                         	LDBZE _CX,i?MKO_data_to_transmit
00000038    44201E22                       	ADD   _DX,_BX,_CX
0000003C    090122                         	SHL   _DX,#01h
0000003F    6701020022                     	ADD   _DX,MKO_tr_data
00000044    090120                         	SHL   _CX,#01h
00000047    641C20                         	ADD   _CX,data?MKO_data_to_transmit
0000004A    A22020                         	LD    _CX,[_CX]
0000004D    C3220220                       	ST    _CX,02h[_DX]
;000026      }
00000051    1724                           	INCB  i?MKO_data_to_transmit
00000053    991F24                         	CMPB  i?MKO_data_to_transmit,#1Fh
00000056    D3D7                           	JNC   ??_3_LOOP
;000027       MKO_tr_data[0+(subaddr*32)] = data[31];
00000058    09011E                         	SHL   _BX,#01h
0000005B    670102001E                     	ADD   _BX,MKO_tr_data
00000060    209D                           	SJMP  COMMON?END_MKO_data_to_transmit
;000028      return 0;
;000029    }
.ENDF
            MKO_receive_data:
;000031    int8 MKO_receive_data(uint16 *data, uint8 subaddr)
00000062    C824                           	PUSH  _EX
00000064    B01E25                         	LDB   _EH,_BL
;000034      if (subaddr == 0 | subaddr > 30) return -1;
00000067    980025                         	CMPB  subaddr?MKO_receive_data,0
0000006A    DF05                           	JE    ??_4_IF
0000006C    991F25                         	CMPB  subaddr?MKO_receive_data,#1Fh
0000006F    D305                           	JNC   ??_4_ELSE
                     ??_4_IF:
00000071    B1FF1C                         	LDB   _AL,#0FFh
00000074    203F                           	SJMP  ??_EXIT?_MKO_receive_data
                   ??_4_ELSE:
;000035      for (i=0; i<31; i++)
00000076    1124                           	CLRB  i?MKO_receive_data
                   ??_6_LOOP:
;000036      {
;000037        data[i] =  MKO_rv_data[i+1+(subaddr*32)];
00000078    AC251E                         	LDBZE _BX,subaddr?MKO_receive_data
0000007B    09051E                         	SHL   _BX,#05h
0000007E    AC2420                         	LDBZE _CX,i?MKO_receive_data
00000081    A02022                         	LD    _DX,_CX
00000084    090122                         	SHL   _DX,#01h
00000087    641C22                         	ADD   _DX,data?MKO_receive_data
0000008A    44201E20                       	ADD   _CX,_BX,_CX
0000008E    090120                         	SHL   _CX,#01h
00000091    6701000020                     	ADD   _CX,MKO_rv_data
00000096    A3200220                       	LD    _CX,02h[_CX]
0000009A    C22220                         	ST    _CX,[_DX]
;000038      }
0000009D    1724                           	INCB  i?MKO_receive_data
0000009F    991F24                         	CMPB  i?MKO_receive_data,#1Fh
000000A2    D3D4                           	JNC   ??_6_LOOP
;000039      data[31] = MKO_rv_data[0+(subaddr*32)] ;
000000A4    09011E                         	SHL   _BX,#01h
000000A7    670100001E                     	ADD   _BX,MKO_rv_data
000000AC    A21E1E                         	LD    _BX,[_BX]
000000AF    C31C3E1E                       	ST    _BX,3Eh[data?MKO_receive_data]
;000040      return 0;
000000B3    111C                           	CLRB  _AL
;000041    }
   ??_EXIT?_MKO_receive_data:
000000B5    CC24                           	POP   _EX
000000B7    F0                             	RET   
.ENDF
     MKO_receive_data_change:
;000043    int8 MKO_receive_data_change(uint16 *data, uint8 subaddr)
000000B8    C824                           	PUSH  _EX
000000BA    B01E25                         	LDB   _EH,_BL
;000046      if (subaddr == 0 & subaddr > 30) return -1;
000000BD    980025                         	CMPB  subaddr?MKO_receive_data_change,0
000000C0    D70A                           	JNE   ??_7_ELSE
000000C2    991F25                         	CMPB  subaddr?MKO_receive_data_change,#1Fh
000000C5    D305                           	JNC   ??_7_ELSE
000000C7    B1FF1C                         	LDB   _AL,#0FFh
000000CA    203C                           	SJMP  ??_EXIT?_MKO_receive_data_change
                   ??_7_ELSE:
;000047      for (i=0; i<31; i++)
000000CC    1124                           	CLRB  i?MKO_receive_data_change
                   ??_9_LOOP:
;000048      {
;000049        MKO_rv_data[i+1+(subaddr*32)] = data[i];
000000CE    AC251E                         	LDBZE _BX,subaddr?MKO_receive_data_change
000000D1    09051E                         	SHL   _BX,#05h
000000D4    AC2420                         	LDBZE _CX,i?MKO_receive_data_change
000000D7    44201E22                       	ADD   _DX,_BX,_CX
000000DB    090122                         	SHL   _DX,#01h
000000DE    6701000022                     	ADD   _DX,MKO_rv_data
000000E3    090120                         	SHL   _CX,#01h
000000E6    641C20                         	ADD   _CX,data?MKO_receive_data_change
000000E9    A22020                         	LD    _CX,[_CX]
000000EC    C3220220                       	ST    _CX,02h[_DX]
;000050      }
000000F0    1724                           	INCB  i?MKO_receive_data_change
000000F2    991F24                         	CMPB  i?MKO_receive_data_change,#1Fh
000000F5    D3D7                           	JNC   ??_9_LOOP
;000051       MKO_rv_data[0+(subaddr*32)] = data[31];
000000F7    09011E                         	SHL   _BX,#01h
000000FA    670100001E                     	ADD   _BX,MKO_rv_data
COMMON?END_MKO_data_to_transmit:
000000FF    A31C3E1C                       	LD    _AX,3Eh[_AX]
00000103    C21E1C                         	ST    _AX,[_BX]
;000052      return 0;
00000106    111C                           	CLRB  _AL
??_EXIT?_MKO_data_to_transmit:
;000053    }
??_EXIT?_MKO_receive_data_change:
00000108    CC24                           	POP   _EX
0000010A    F0                             	RET   
.ENDF
MKO_get_data_from_transmit_subaddr:
;000055    void MKO_get_data_from_transmit_subaddr(uint16 *data, uint8 subaddr)
0000010B    C824                           	PUSH  _EX
0000010D    B01E25                         	LDB   _EH,_BL
;000058    	for (i=0; i<31; i++)	{
00000110    1124                           	CLRB  i?MKO_get_data_from_transmit_subaddr
                  ??_10_LOOP:
;000059    		data[i] =  MKO_tr_data[i+1+(subaddr*32)];
00000112    AC251E                         	LDBZE _BX,subaddr?MKO_get_data_from_transmit_subaddr
00000115    09051E                         	SHL   _BX,#05h
00000118    AC2420                         	LDBZE _CX,i?MKO_get_data_from_transmit_subaddr
0000011B    A02022                         	LD    _DX,_CX
0000011E    090122                         	SHL   _DX,#01h
00000121    641C22                         	ADD   _DX,data?MKO_get_data_from_transmit_subaddr
00000124    44201E20                       	ADD   _CX,_BX,_CX
00000128    090120                         	SHL   _CX,#01h
0000012B    6701020020                     	ADD   _CX,MKO_tr_data
00000130    A3200220                       	LD    _CX,02h[_CX]
00000134    C22220                         	ST    _CX,[_DX]
;000060    	}
00000137    1724                           	INCB  i?MKO_get_data_from_transmit_subaddr
00000139    991F24                         	CMPB  i?MKO_get_data_from_transmit_subaddr,#1Fh
0000013C    D3D4                           	JNC   ??_10_LOOP
;000061    	data[31] = MKO_tr_data[0+(subaddr*32)] ;
0000013E    09011E                         	SHL   _BX,#01h
00000141    670102001E                     	ADD   _BX,MKO_tr_data
00000146    A21E1E                         	LD    _BX,[_BX]
00000149    C31C3E1E                       	ST    _BX,3Eh[data?MKO_get_data_from_transmit_subaddr]
;000062    }
0000014D    CC24                           	POP   _EX
0000014F    F0                             	RET   
.ENDF
                   MKO_State:
;000065    uint16 MKO_State()
;000067      return BSISTAT_TERM;
00000150    A30100001C                     	LD    _AX,BSISTAT_TERM
;000068    }
00000155    F0                             	RET   
.ENDF
                ?INTERRUPT09:
                  IRQ_MKO_UD:
;000071    void  IRQ_MKO_UD()
00000000    F4                             	PUSHA 
00000001    C81C                           	PUSH  _AX
00000003    C800                           	PUSH  00h
;000073        _di_();
00000005    FA                             	DI    
;000074    	state = MKO_State();
00000006    A30100001C                     	LD    _AX,BSISTAT_TERM
0000000B    C318001C                       	ST    _AX,state?IRQ_MKO_UD[_SP]
;000075    	if (state & (1<<13)) mko_activity_timeout = MKO_TIMEOUT_MS;
0000000F    B318011C                       	LDB   _AL,(state?IRQ_MKO_UD+1)[_SP]
00000013    351C08                         	JBC   _AL,5h,??_11_ELSE
00000016    B10A1C                         	LDB   _AL,#0Ah
00000019    C70104001C                     	STB   _AL,mko_activity_timeout
                  ??_11_ELSE:
;000076      if ((state & (1<<10)) == 0) {
0000001E    B318011C                       	LDB   _AL,(state?IRQ_MKO_UD+1)[_SP]
00000022    3A1C08                         	JBS   _AL,2h,??_12_ELSE
;000077        mko_read_flag = 1;  //проверка бита направления передачи из командного слова
00000025    B1011C                         	LDB   _AL,#01h
00000028    C70100001C                     	STB   _AL,mko_read_flag
;000078      }
                  ??_12_ELSE:
;000079      _ei_();
0000002D    FB                             	EI    
;000080    }
0000002E    CC00                           	POP   00h
00000030    CC1C                           	POP   _AX
00000032    F5                             	POPA  
00000033    F0                             	RET   
.ENDF

.\TestLinear\mko_ud.c: 394 byte(s), 2720 line(s), 0 error(s), 0 warning(s)

