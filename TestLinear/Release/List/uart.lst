*******************************************************************************
*                                                                             *
*              K1874BE96T C CROSS COMPILER Version 2.00.150328                *
*                          Copyright (C) 2012 NIIET                           *
*                                                                             *
*******************************************************************************

                   UART_Init:
;FILE: .\TestLinear\uart.c
;000026    void UART_Init()
00000000    C800                           	PUSH  00h
;000030      BAUD_RATE1 = 0x1F;  //38400
00000002    B11F1C                         	LDB   _AL,#1Fh
00000005    C70100001C                     	STB   _AL,BAUD_RATE1
;000031      BAUD_RATE1 = 0x80;
0000000A    B1801C                         	LDB   _AL,#80h
0000000D    C70100001C                     	STB   _AL,BAUD_RATE1
;000032      SP_CON1     = 0x19;
00000012    B1191C                         	LDB   _AL,#19h
00000015    C70100001C                     	STB   _AL,SP_CON1
;000034      BAUD_RATE0 = 0x1F;  //38400
0000001A    B11F00                         	LDB   BAUD_RATE0,#1Fh
;000035      BAUD_RATE0 = 0x80;
0000001D    B18000                         	LDB   BAUD_RATE0,#80h
;000036      SP_CON0     = 0x19;
00000020    B11900                         	LDB   SP_CON0,#19h
;000038      WSR = 0x0F;      //swap to HWindow15
00000023    B10F00                         	LDB   WSR,#0Fh
;000039      INT_MASK1 |= 0x01;      //allow transmit interrupt
00000026    910100                         	ORB   INT_MASK1,#01h
;000040      WSR = 0x00;        //swap to HWindow0
00000029    1100                           	CLRB  WSR
;000041      WSR = 0x0F;
0000002B    B10F00                         	LDB   WSR,#0Fh
;000042      tmp = IOC1;
0000002E    C7180000                       	STB   IOC1,tmp?UART_Init[_SP]
;000043      WSR = 0x00;
00000032    1100                           	CLRB  WSR
;000044      IOC1 = tmp | 0x21;
00000034    B318001C                       	LDB   _AL,tmp?UART_Init[_SP]
00000038    91211C                         	ORB   _AL,#21h
0000003B    B01C00                         	LDB   IOC1,_AL
;000045      CLKC = 0xFF3F;
0000003E    A13FFF1C                       	LD    _AX,#0FF3Fh
00000042    C30100001C                     	ST    _AX,CLKC
;000046      tmp = SP_STAT1;// очистка состояний статусных байтов
00000047    B30100001C                     	LDB   _AL,SP_STAT1
0000004C    C718001C                       	STB   _AL,tmp?UART_Init[_SP]
;000047      tmp = SP_STAT0;// очистка состояний статусных байтов
00000050    C7180000                       	STB   SP_STAT0,tmp?UART_Init[_SP]
;000049      UartPTS.dst = (uint8*)&SBUF_TX0;
00000054    A100001C                       	LD    _AX,#SBUF_TX0
00000058    C30104001C                     	ST    _AX,(UartPTS+4)
;000050      UartPTS.con = 0x9A;
0000005D    B19A1C                         	LDB   _AL,#9Ah
00000060    C70101001C                     	STB   _AL,(UartPTS+1)
;000051      UartPTS.res[0] = UartPTS.res[1] = 0;
00000065    111C                           	CLRB  _AL
00000067    C70107001C                     	STB   _AL,(UartPTS+7)
0000006C    C70106001C                     	STB   _AL,(UartPTS+6)
;000052      _ei_();
00000071    FB                             	EI    
;000053      __EPTS();
00000072    ED                             	EPTS  
;000055    }
00000073    CC00                           	POP   00h
00000075    F0                             	RET   
.ENDF
                ?INTERRUPT08:
              IRQ_uart_rx_tx:
;000057    void IRQ_uart_rx_tx()
00000000    F4                             	PUSHA 
00000001    C81C                           	PUSH  _AX
00000003    C81E                           	PUSH  _BX
;000059    	_di_(); // запрет обработки прерываний
00000005    FA                             	DI    
;000060    	status_uart1 = SP_STAT1;
00000006    B30100001C                     	LDB   _AL,SP_STAT1
0000000B    C7018C001C                     	STB   _AL,status_uart1
;000061    	if (status_uart1 & 0x40) //oбрабатываем прерывание по приему
00000010    361C47                         	JBC   _AL,6h,??_1_ELSE
;000062    	{
;000063    		if (INT_PEND1 & 0x10) 
00000013    34000C                         	JBC   INT_PEND1,4h,??_2_ELSE
;000064    		{
;000065    			len_rx1 = 0;
00000016    C7018A0000                     	STB   00h,len_rx1
;000066    			UART1_RX_array[len_rx1] = SBUF_RX1; 
0000001B    AF018A001C                     	LDBZE _AX,len_rx1
;000068    		}
00000020    201A                           	SJMP  ??_9_COMMON
                   ??_2_ELSE:
;000069    		else if (len_rx1 > 63)
00000022    B3018A001C                     	LDB   _AL,len_rx1
00000027    99401C                         	CMPB  _AL,#40h
0000002A    D307                           	JNC   ??_3_ELSE
;000070    		{
;000071    			len_rx1 = 0;
0000002C    C7018A0000                     	STB   00h,len_rx1
;000072    		}
00000031    2013                           	SJMP  ??_3_END
                   ??_3_ELSE:
;000074    		{
;000075    			len_rx1 ++;
00000033    171C                           	INCB  _AL
00000035    C7018A001C                     	STB   _AL,len_rx1
;000076    			UART1_RX_array[len_rx1] = SBUF_RX1;
0000003A    111D                           	CLRB  _AH
                 ??_9_COMMON:
0000003C    B30100001E                     	LDB   _BL,SBUF_RX1
00000041    C71D08001E                     	STB   _BL,UART1_RX_array[_AX]
;000078    		}
                    ??_3_END:
;000079    		len_rx1 &= 0x3F;
00000046    B3018A001C                     	LDB   _AL,len_rx1
0000004B    713F1C                         	ANDB  _AL,#3Fh
0000004E    C7018A001C                     	STB   _AL,len_rx1
;000080    		INT_PEND1 &= ~0x10;  //сброс флага переполнения таймера 2
00000053    71EF00                         	ANDB  INT_PEND1,#0EFh
;000081    		TIMER2 = 0xF63C;  //межпакетный интервал 2ms
00000056    A13CF600                       	LD    TIMER2,#0F63Ch
;000082    		}
                   ??_1_ELSE:
;000084    	{
;000087    	}
;000088    	_ei_(); //разрешение обработки прерываний
0000005A    FB                             	EI    
;000089    }
0000005B    CC1E                           	POP   _BX
0000005D    CC1C                           	POP   _AX
0000005F    F5                             	POPA  
00000060    F0                             	RET   
.ENDF
                    UART1_RX:
;000091    uint8 UART1_RX(char *buff)
00000076    C824                           	PUSH  _EX
;000093      uint8 len_tmp = 0;
00000078    1124                           	CLRB  len_tmp?UART1_RX
;000094      if((len_rx1 != 0) && ((INT_PEND1 & 0x10) != 0))
0000007A    B3018A0020                     	LDB   _CL,len_rx1
0000007F    980020                         	CMPB  _CL,0
00000082    DF15                           	JE    ??_4_ELSE
00000084    340012                         	JBC   INT_PEND1,4h,??_4_ELSE
;000095      {
;000096    	len_tmp =  len_rx1 + 1; 
00000087    55012024                       	ADDB  len_tmp?UART1_RX,_CL,#01h
;000098        memcpy(buff, UART1_RX_array, len_rx1);
0000008B    1121                           	CLRB  _CH
0000008D    A108001E                       	LD    _BX,#UART1_RX_array
00000091    EF6CFF                         	LCALL memcpy
;000099    	len_rx1 = 0;
00000094    C7018A0000                     	STB   00h,len_rx1
;000100      }
                   ??_4_ELSE:
;000101      return len_tmp;
00000099    B0241C                         	LDB   _AL,len_tmp?UART1_RX
;000102    }
0000009C    CC24                           	POP   _EX
0000009E    F0                             	RET   
.ENDF
                    UART1_TX:
;000104    uint8 UART1_TX(char *buff, uint8 len)
0000009F    A01C22                         	LD    _DX,_AX
;000107      SP_CON1 = 0x11;  //запрет приема
000000A2    B1111F                         	LDB   _BH,#11h
000000A5    C70100001F                     	STB   _BH,SP_CON1
;000108      for (i = 0; i < len; i++)
000000AA    111C                           	CLRB  i?UART1_TX
000000AC    2022                           	SJMP  ??_6_CHECK
                   ??_6_LOOP:
;000109      {
;000110        status_uart1 = SP_STAT1;
000000AE    B30100001F                     	LDB   _BH,SP_STAT1
000000B3    C7018C001F                     	STB   _BH,status_uart1
;000111        while(!(status_uart1 & 0x08));//дожидаемся освобождения буфера
                     ??_7_DO:
000000B8    B3018C001F                     	LDB   _BH,status_uart1
000000BD    331FF8                         	JBC   _BH,3h,??_7_DO
;000112        SBUF_TX1 = buff[i];
000000C0    AC1C20                         	LDBZE _CX,i?UART1_TX
000000C3    642220                         	ADD   _CX,buff?UART1_TX
000000C6    B2201F                         	LDB   _BH,[_CX]
000000C9    C70100001F                     	STB   _BH,SBUF_TX1
;000113      }
000000CE    171C                           	INCB  i?UART1_TX
                  ??_6_CHECK:
000000D0    981E1C                         	CMPB  i?UART1_TX,len?UART1_TX
000000D3    D3D9                           	JNC   ??_6_LOOP
;000114      SP_CON1 = 0x19;  //разрешение приема приема
000000D5    B1191F                         	LDB   _BH,#19h
000000D8    C70100001F                     	STB   _BH,SP_CON1
;000115      return i;
;000116    }
000000DD    F0                             	RET   
.ENDF
            UART1_SendPacket:
;000118    void UART1_SendPacket(uint8 *buff, uint8 leng) {
000000DE    C824                           	PUSH  _EX
000000E0    B01E24                         	LDB   _EL,_BL
000000E3    A01C1E                         	LD    _BX,_AX
;000119      SP_CON1 = 0x11;  //запрет приема
000000E6    B11120                         	LDB   _CL,#11h
000000E9    C701000020                     	STB   _CL,SP_CON1
;000120      UartPTS.dst = (uint8*)&SBUF_TX1;
000000EE    A1000020                       	LD    _CX,#SBUF_TX1
000000F2    C301040020                     	ST    _CX,(UartPTS+4)
;000121      WSR = 1;
000000F7    B10100                         	LDB   WSR,#01h
;000122      while(PTSSEL & 0x100);  //ожидание конца передачи
                     ??_8_DO:
000000FA    3801FD                         	JBS   (PTSSEL+1),0h,??_8_DO
;000123      memcpy(UART1_TX_array, buff, leng);
000000FD    AC2420                         	LDBZE _CX,leng?UART1_SendPacket
00000100    A148001C                       	LD    _AX,#UART1_TX_array
00000104    EFF9FE                         	LCALL memcpy
;000124      UartPTS.src = (uint8*)&UART1_TX_array[1];
00000107    A1490020                       	LD    _CX,#(UART1_TX_array+1)
0000010B    C301020020                     	ST    _CX,(UartPTS+2)
;000125      UartPTS.count = leng-1;
00000110    1524                           	DECB  leng?UART1_SendPacket
00000112    C701000024                     	STB   leng?UART1_SendPacket,UartPTS
;000126      PTSSEL = 0x100;  //start Tx
00000117    A1000100                       	LD    PTSSEL,#0100h
;000127      WSR = 0;
0000011B    1100                           	CLRB  WSR
;000128      SBUF_TX1 = UART1_TX_array[0];
0000011D    B30148001F                     	LDB   _BH,UART1_TX_array
00000122    C70100001F                     	STB   _BH,SBUF_TX1
;000129    }00000127    CC24                           	POP   _EX
00000129    F0                             	RET   
.ENDF

.\TestLinear\uart.c: 395 byte(s), 2818 line(s), 0 error(s), 0 warning(s)

